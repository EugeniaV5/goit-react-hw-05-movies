{"version":3,"file":"static/js/478.b3d46e85.chunk.js","mappings":"uSAEaA,EAAcC,EAAAA,GAAAA,GAAH,gIAQXC,EAAiBD,EAAAA,GAAAA,GAAH,yK,SCLdE,EAAW,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACzB,OACE,8BACE,SAACJ,EAAD,UACGI,EAAMC,KAAI,SAAAC,GAAI,OACb,UAACJ,EAAD,WACGI,EAAKC,cACJ,gBACEC,IAAG,yCAAoCF,EAAKC,cAC5CE,IAAKH,EAAKI,QAGZ,gBAAKF,IAAKG,EAASF,IAAKH,EAAKI,KAAME,MAAM,SAG3C,uBAAIN,EAAKI,QACT,uBAAIJ,EAAKO,cAXUP,EAAKQ,YCsCpC,EAzCa,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOb,EAAP,KAAcc,EAAd,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WACRC,EAAUP,KACT,CAACA,IAEJ,IAAMO,EAAS,mCAAG,WAAMP,GAAN,gFAChBK,GAAa,GADG,mBAGSG,EAAAA,EAAAA,IAAgBR,GAHzB,gBAGNS,EAHM,EAGNA,KACRN,EAASM,EAAKlB,MAJA,yEAQdc,GAAa,GARC,4EAAH,sDAWf,OACE,2BACGD,IACC,gBAAKM,UAAU,SAAf,UACE,SAAC,KAAD,CACEC,MAAM,UACNC,WAAW,oBACXC,OAAQ,GACRhB,MAAO,OAIK,IAAjBR,EAAMyB,QACL,SAAC1B,EAAD,CAAUC,MAAOA,KAEjB,qD,0MCxCF0B,EAAU,mCAGT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBC,IAAAA,IAAA,wCAA2CF,IAD7D,cACCG,EADD,yBAEEA,GAFF,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,yFACkBH,IAAAA,IAAA,kCACMF,EADN,kBACuBK,EADvB,yBADlB,uBACGX,EADH,EACGA,KADH,kBAIE,CAAEA,KAAAA,IAJJ,kEAOA,SAAeY,EAAtB,+CAAO,OAAP,oBAAO,WAA4BtB,GAA5B,yFACkBkB,IAAAA,IAAA,mBAAsBlB,EAAtB,oBAAoCgB,IADtD,uBACGN,EADH,EACGA,KADH,kBAEE,CAAEA,KAAAA,IAFJ,kEAKA,SAAeD,EAAtB,+CAAO,OAAP,oBAAO,WAA+BT,GAA/B,yFACkBkB,IAAAA,IAAA,mBAAsBlB,EAAtB,4BAA4CgB,IAD9D,uBACGN,EADH,EACGA,KADH,kBAEE,CAAEA,KAAAA,IAFJ,kEAKA,SAAea,EAAtB,+CAAO,OAAP,oBAAO,WAA+BvB,GAA/B,yFACkBkB,IAAAA,IAAA,mBAAsBlB,EAAtB,4BAA4CgB,IAD9D,uBACGN,EADH,EACGA,KADH,kBAEE,CAAEA,KAAAA,IAFJ,kEAxBPQ,IAAAA,SAAAA,QAAyB,8B","sources":["components/CastItem/CastItem.styled.js","components/CastItem/CastItem.jsx","pages/Cast.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastWrapper = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  list-style: none;\n  margin-top: -10px;\n  margin-left: -10px;\n`;\n\nexport const StyledCastItem = styled.li`\n  /* &:not(:last-child) {\n    margin-right: 10px;\n  } */\n  margin-top: 10px;\n  margin-left: 10px;\n\n  flex-basis: calc((100% - 30px) / 3);\n`;\n","import propTypes from 'prop-types';\n\nimport noImage from '../../images/noImage.jpg';\nimport { CastWrapper, StyledCastItem } from './CastItem.styled';\n\nexport const CastItem = ({ casts }) => {\n  return (\n    <article>\n      <CastWrapper>\n        {casts.map(cast => (\n          <StyledCastItem key={cast.id}>\n            {cast.profile_path ? (\n              <img\n                src={`https://image.tmdb.org/t/p/w185${cast.profile_path}`}\n                alt={cast.name}\n              />\n            ) : (\n              <img src={noImage} alt={cast.name} width=\"185\" />\n            )}\n\n            <p>{cast.name}</p>\n            <p>{cast.character}</p>\n          </StyledCastItem>\n        ))}\n      </CastWrapper>\n    </article>\n  );\n};\n\nCastItem.propTypes = {\n  casts: propTypes.arrayOf(propTypes.object).isRequired,\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { Circles } from 'react-loader-spinner';\n\nimport { getMovieCredits } from '../services/api';\nimport { CastItem } from '../components/CastItem/CastItem';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [casts, setCasts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    fetchCast(movieId);\n  }, [movieId]);\n\n  const fetchCast = async movieId => {\n    setIsLoading(true);\n    try {\n      const { data } = await getMovieCredits(movieId);\n      setCasts(data.cast);\n    } catch (error) {\n      //   toast.error('Page is not found');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return (\n    <div>\n      {isLoading && (\n        <div className=\"Loader\">\n          <Circles\n            color=\"#f07416\"\n            arialLabel=\"loading-indicator\"\n            height={80}\n            width={80}\n          />\n        </div>\n      )}\n      {casts.length !== 0 ? (\n        <CastItem casts={casts} />\n      ) : (\n        <p>No information found</p>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = 'd16c53a3a4d5eb154f379745597d6181';\naxios.defaults.baseURL = 'https://api.themoviedb.org';\n\nexport async function getTrending() {\n  const response = await axios.get(`/3/trending/movie/day?api_key=${API_KEY}`);\n  return response;\n}\n\nexport async function getMoviesByQuery(searchQuery) {\n  const { data } = await axios.get(\n    `/3/search/movie?api_key=${API_KEY}&query=${searchQuery}&include_adult=false`\n  );\n  return { data };\n}\n\nexport async function getMovieById(id) {\n  const { data } = await axios.get(`/3/movie/${id}?api_key=${API_KEY}`);\n  return { data };\n}\n\nexport async function getMovieCredits(id) {\n  const { data } = await axios.get(`/3/movie/${id}/credits?api_key=${API_KEY}`);\n  return { data };\n}\n\nexport async function getMovieReviews(id) {\n  const { data } = await axios.get(`/3/movie/${id}/reviews?api_key=${API_KEY}`);\n  return { data };\n}\n"],"names":["CastWrapper","styled","StyledCastItem","CastItem","casts","map","cast","profile_path","src","alt","name","noImage","width","character","id","movieId","useParams","useState","setCasts","isLoading","setIsLoading","useEffect","fetchCast","getMovieCredits","data","className","color","arialLabel","height","length","API_KEY","getTrending","axios","response","getMoviesByQuery","searchQuery","getMovieById","getMovieReviews"],"sourceRoot":""}